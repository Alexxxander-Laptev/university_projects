Исходный без потоков

import random
import threading
import time


def straight_stroke(matrix, row, line):
    # Прямой ход в решении СЛАУ методом Гаусса (1 этап)
    if matrix[0][0] == 0:
        for i in range(1, line):
            if matrix[i][0] > 0:
                matrix.insert(0, matrix[i])
                matrix.pop(i + 1)
                break

    for deep_matrix in range(line - 1):
        for i in range(deep_matrix + 1, line):
            first_factor = matrix[i][deep_matrix]
            second_factor = matrix[deep_matrix][deep_matrix]
            for j in range(deep_matrix, row):
                matrix[i][j] = matrix[i][j] * second_factor + \
                    matrix[deep_matrix][j] * (-first_factor)
    return matrix


def reverse_stroke(matrix, line):
    x = [0] * line
    for i in range(line - 1, -1, -1):
        if matrix[i][i] != 0:
            x[i] = matrix[i][i + 1] / matrix[i][i]
            for count_lines in range(i - 1, -1, -1):
                matrix[count_lines][i] *= x[i]
                matrix[count_lines][i] = matrix[count_lines][i + 1] - \
                    matrix[count_lines][i]
    return x


if __name__ == "__main__":
    mode = 0
    while mode < 1 or mode > 2:
        mode = int(
            input("Введите номер режима (1 - ввод вручную, 2 - автогенерация):\t"))

    line = int(input("Введите количество строк:\t"))
    row = int(input("Введите количество столбцов:\t"))
    matrix = []
    if mode == 1:
        # Задаем матрицу вручную
        for i in range(line):
            matrix_line = []
            for j in range(row):
                element = int(input(f"Введите элемент ({i};{j}):\t"))
                matrix_line.append(element)
            matrix.append(matrix_line)
    elif mode == 2:
        # Автогенерируемая матрица
        for i in range(line):
            matrix_line = []
            for j in range(row):
                element = random.randint(-99, 99)
                matrix_line.append(element)
            matrix.append(matrix_line)
    print(matrix)
    start_time = time.time()
    straight_stroke(matrix, row, line)
    x = reverse_stroke(matrix, line)
    end_time = time.time()
    print(x)
    print(end_time - start_time)







Исходный с потоками (громадные цифры)

import random
import threading
import time
from decimal import Decimal


def ladder(deep_matrix, i):
    first_factor = matrix[i][deep_matrix]
    second_factor = matrix[deep_matrix][deep_matrix]
    for j in range(deep_matrix, row):
        matrix[i][j] = matrix[i][j] * second_factor + \
            matrix[deep_matrix][j] * (-first_factor)


def straight_stroke(matrix, row, line):
    # Прямой ход в решении СЛАУ методом Гаусса (1 этап)
    if matrix[0][0] == 0:
        for i in range(1, line):
            if matrix[i][0] > 0:
                matrix.insert(0, matrix[i])
                matrix.pop(i + 1)
                break

    for deep_matrix in range(line - 1):
        for i in range(deep_matrix + 1, line):
            matrix_member_str = threading.Thread(
                target=ladder, args=(deep_matrix, i,))
            matrix_member_str.start()
        matrix_member_str.join()
    return matrix


def ladder_reverse(x, count_lines, i):
    matrix[count_lines][i] = 1 - (matrix[count_lines][i] / matrix[count_lines]
                                  [i + 1]) * (x[i] / matrix[count_lines][i + 1])


def reverse_stroke(matrix, line):
    # ОБратный ход в решении СЛАУ методом Гаусса (2 этап)
    x = [0] * line
    for i in range(line - 1, -1, -1):
        # if matrix[i][i] != 0:
        x[i] = matrix[i][i + 1] / matrix[i][i]
        for count_lines in range(i - 1, -1, -1):
            matrix_member_rev = threading.Thread(
                target=ladder_reverse, args=(x, count_lines, i,))
            matrix_member_rev.start()
        matrix_member_rev.join()
    return x


if __name__ == "__main__":
    mode = 0
    while mode < 1 or mode > 2:
        mode = int(
            input("Введите номер режима (1 - ввод вручную, 2 - автогенерация):\t"))

    line = int(input("Введите количество строк:\t"))
    row = int(input("Введите количество столбцов:\t"))
    matrix = []
    if mode == 1:
        # Задаем матрицу вручную
        for i in range(line):
            matrix_line = []
            for j in range(row):
                element = int(input(f"Введите элемент ({i};{j}):\t"))
                matrix_line.append(element)
            matrix.append(matrix_line)
    elif mode == 2:
        # Автогенерируемая матрица
        for i in range(line):
            matrix_line = []
            for j in range(row):
                element = random.randint(-99, 99)
                matrix_line.append(element)
            matrix.append(matrix_line)
    print(matrix)
    start_time = time.time()
    straight_stroke(matrix, row, line)
    x = reverse_stroke(matrix, line)
    end_time = time.time()
    print(x)
    print(end_time - start_time)













